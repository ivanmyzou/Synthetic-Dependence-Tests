iris_outlier <- rbind(iris0, c(100,100,100,100))
iris.3means <- pam(iris_outlier,3) #3 组
#irisplot(iris.3means$cluster)
table(species=c(iris$Species,'outlier'), cluster=iris.3means$cluster)
#受 outlier 影响
iris_outlier <- rbind(iris0, c(20,10,20,10))
iris.3means <- pam(iris_outlier,3) #3 组
#irisplot(iris.3means$cluster)
table(species=c(iris$Species,'outlier'), cluster=iris.3means$cluster)
iris_outlier <- rbind(iris0, c(20,10,20,10))
iris.3means <- kmeans(iris_outlier,3) #3 组
#irisplot(iris.3means$cluster)
table(species=c(iris$Species,'outlier'), cluster=iris.3means$cluster)
#BIC 用来 检验 模型 好坏
#既考虑 模型的 简单度 （参数量）越简单 越好； 也考虑 模型的 契合度 （likelihood) 越大越好
# Automatic best model and cluster count selection via BIC:
(iris.bestMBC <- Mclust(iris0))
#(VEV,2)
#V: 不一样的 大小
#E: 一样的 椭圆扁度
#V：不一样的 椭圆轴 走向
#2 两组
plot(iris.bestMBC, what=c("BIC", "classification"))
？Mclust
?Mclust
log(1)
iris.bestMBC
iris.bestMBC￥BIC
iris.bestMBC$BIC
iris.bestMBC$G
iris.bestMBC$classification
#强制要求 3 组
(iris.3MBC <- Mclust(iris0,G=3))
plot(iris.3MBC, what=c("classification", "uncertainty", "density"))
plot(iris.3MBC, what=c("classification", "uncertainty", "density", "BIC"))
iris.3MBC
irisplot(iris.3MBC$classification)
??candisc
library(candisc)
irisplot(iris.3MBC$classification)
table(species=iris$Species, cluster=iris.3MBC$classification)
##Generates Sample from Normal and Non-Normal Distributions
#rm(list = ls())
library(data.table)
library(dplyr)
library(pbapply)
library(PoweR)
library(e1071)
library(keras)
library(fst)
?gensample
getindex
getindex(1)
getindex(2)
getindex(3)
0.48*25+0.12*15+0.4*9-2.5)
0.48*25+0.12*15+0.4*(-2.5)
0.4*35+0.1*25+0.5*(-5)
0.48*0.9+0.12*0.7+0.4*0.05
0.4*1+0.1*0.9
?gensample
gensample(10,100)
getindex
getindex(1)
getindex(2)
getindex(3)
alt_dist.train <- c(rep(6,3), rep(3,3), 1, 4,
rep(8,4), rep(18,5), rep(6,4), rep(9,4), rep(5,5),
26, 10, rep(11,3), rep(28,3), rep(32,4), rep(19,4),
rep(22,4), rep(31,4))
alt_dist.train
unique(alt_dist.train)
unique(alt_dist.train) %>% order
unique(alt_dist.train) %>% sort
getindex(1)
getindex(3)
1/3*log(300)
1/3*log(300) + 2/3*log(175)
exp^(5.344451) - 200
exp(5.344451) - 200
50/3 - 9.4428
##Generates Sample from Normal and Non-Normal Distributions
#rm(list = ls())
library(data.table)
library(dplyr)
library(pbapply)
library(PoweR)
library(e1071)
library(keras)
library(fst)
#====================================================================================================
#====================================================================================================
#I. Training Data Definition
##1.1
M_normal.train <- 100000 # number of simulations for normal distribution
normal_dist_param.train <- c(0, 1)  # parameter of the normal distribution for training purpose
##1.2
M_other.train <- 5000  # simulations per non-normal distribution
# list of alternative distribution to train the NN on
##### An empirical power comparison of univariate goodness-of-fit tests for normality (Ramao et al. 2010)
alt_dist.train <- c(rep(6,3), rep(3,3), 1, 4,
rep(8,4), rep(18,5), rep(6,4), rep(9,4), rep(5,5),
26, 10, rep(11,3), rep(28,3), rep(32,4), rep(19,4),
rep(22,4), rep(31,4))
alt_dist_param.train <- list(c(0.5, 0.5), c(1, 1), c(2, 2), c(0, 0.5), c(0, 1), c(0, 2), c(0, 1), c(2, 2),
c(1), c(2), c(4), c(10), c(0.14), c(0.5), c(2), c(5), c(10), c(2, 1), c(2, 5), c(4, 0.5), c(5, 1),
c(1), c(2), c(4), c(10), c(2, 2), c(3, 2), c(9, 1), c(15, 1),
c(100, 1), c(1, 2), c(0, 1), c(0.5, 1), c(1, 2), c(2, 3.4), c(0, 1, -0.5), c(0, 1, -1), c(0, 4, -0.75),
c(-1, 1), c(-2, 2), c(-3, 3), c(-2, 1), c(0.3, 1), c(0.5, 1), c(0.4, 3), c(0.3, 5),
c(0.05, 0.25), c(0.2, 0.25), c(0.1, 2), c(0.2, 4), c(0.3, 1, 0.25), c(0.4, 3, 0.25), c(0.5, 1, 4), c(0.4, 3, 4))
alt_dist_type.train <- c(rep("symm", 17), rep("asymm", 21), rep("ModN", 16))
alt_dist_full.train <- data.table(alt_train = alt_dist.train,
alt_param_train = I(alt_dist_param.train),
alt_type_train = alt_dist_type.train,
stringsAsFactors = F)
##1.3
test_stat <- c(1:2, 4:9, 13, 15:18, 20:26, 29:37)  # list of test statistics
alpha <- 0.05  # significance
test_stat.C <- paste0("stat", test_stat) # for .C() version of statcompute()
#====================================================================================================
#====================================================================================================
#II. In-Sample Test Data Definition
##2.1
M_normal.in <- 5000 # number of simulations for normal distribution
normal_dist_param.in <- c(0, 1) # parameter of the normal distribution for training purpose
##2.2
M_other.in <- 5000 # simulations per non-normal distribution
alt_dist.in <- alt_dist.train
alt_dist_param.in <- alt_dist_param.train
alt_dist_type.in <- alt_dist_full.train
alt_dist_full.in <- data.table(alt_in = alt_dist.train,
alt_param_in = I(alt_dist_param.train),
alt_type_in = alt_dist_type.train,
stringsAsFactors = F)
##2.3
test_stat.in <- c(1:2, 4:9, 13, 15:18, 20:26, 29:33, 34:37)
test_stat.in.C <- paste0("stat", test_stat.in) #for .C() version of statcompute()
#====================================================================================================
#====================================================================================================
#III. Out-of-Sample Test Data Definition
##3.1
# list of alternative distribution to test the NN on
##### An empirical power comparison of univariate goodness-of-fit tests for normality (Ramao et al. 2010)
##### Comprehensive comparison of normality tests: Empirical study using many different types of data (Lee et al. 2016)
alt_dist.out <- c(8, 8, 9, 9, 35, 7, 5, 6, 10, 3, 32, 19, 22, 31)
alt_dist_param.out <- list(c(2), c(5), c(2), c(5), c(1),
c(0, 1), c(3, 5), c(2, 1), c(0, 0.5), c(0, 1),c(-3, 2), c(0.5, 5), c(0.1, 4), c(0.5, 3, 4))
alt_dist_type.out <- c("symm", "symm",
rep(c("asymm", "asymm", "asymm", "symm"),2),
rep("ModN", 4))
alt_dist_full.out <- data.frame(alt_out = alt_dist.out,
alt_param_out = I(alt_dist_param.out),
alt_type_out = alt_dist_type.out,
stringsAsFactors = F)
M_other.in
M_normal.in
M_other.in
alt_dist_full.out
test_stat.C
50000 + 5 * 2000 + 20 * 1000 + 400 * 200
200 + 5 * 2 + 20 * 0.5 + 400 * 0.2
50000 + 5 * 2000 + 20 * 1000 + (50 + 280) * 200
500 + 5 * 2 + 20 * 0.5 + 50 * 0.1 + 280 * 0.01
0.5 * log2(10-9) + 0.5 * log2(41)
0.5 * log2(31) + 0.5 * log2(11)
log2(15.40-9)
library(keras)
library(tensorflow)
library(fst)
library(data.table)
library(progress)
library(depstats)
sample_sizes <- c(30, 50, 100, 200, 300, 400)
#Thresholds for models
image_model <- load_model_hdf5("3_Models/image.h5")
score_model <- load_model_hdf5("3_Models/score.h5")
combined_model <- load_model_tf("3_Models/score_image")
setwd("~/GitHub/Synthetic-Dependence-Tests/Reproducing")
library(keras)
library(tensorflow)
library(fst)
library(data.table)
library(progress)
library(depstats)
sample_sizes <- c(30, 50, 100, 200, 300, 400)
#Thresholds for models
image_model <- load_model_hdf5("3_Models/image.h5")
score_model <- load_model_hdf5("3_Models/score.h5")
combined_model <- load_model_tf("3_Models/score_image")
image_thresholds <- data.table(sample_size = sample_sizes)
score_thresholds <- data.table(sample_size = sample_sizes)
combined_thresholds <- data.table(sample_size = sample_sizes)
library(keras)
library(tensorflow)
library(fst)
library(data.table)
library(progress)
library(depstats)
sample_sizes <- c(30, 50, 100, 200, 300, 400)
image_model <- load_model_hdf5("3_Models/image.h5")
score_model <- load_model_hdf5("3_Models/score.h5")
combined_model <- load_model_tf("3_Models/score_image")
image_thresholds <- readRDS('4_Estimated Thresholds/image_thresholds.RDS')
score_thresholds <- readRDS('4_Estimated Thresholds/score_thresholds')
combined_thresholds <- readRDS('4_Estimated Thresholds/combined_thresholds')
other_thresholds <- readRDS('4_Estimated Thresholds/other_thresholds.RDS')
library(dplyr)
library(data.table)
library(ggplot2)
library(depstats)
sample_size <- c(30, 50, 100, 200, 300, 400)
#####
# legend
legend_data <- data.table(model = rep(c("combined", "score", "image", "others"), each = 2),
y = rep(c(3,2,1,0), each = 2), x = rep(c(0,1), 4))
ggplot(legend_data, aes(y = y, x = x, color = model)) +
geom_line(size = 1) +
theme_void() + ylim(-2, 6) + xlim(-3, 2) +
theme(legend.position="none") +
scale_color_manual(values = c("combined" = "royalblue2",
"score" = "salmon2",
"image" = "green3")) +
annotate(geom="text", x=0, y=4.5, label="Legend", size = 7.5) +
annotate(geom="text", x=-1, y=3, label="Combined Model", size = 4) +
annotate(geom="text", x=-1, y=2, label="Score Model", size = 4) +
annotate(geom="text", x=-1, y=1, label="Image Model", size = 4) +
annotate(geom="text", x=-1, y=0, label="Others", size = 4)
#####
# add
powers <- readRDS('5_Powers/add_powers.RDS') %>% as.data.table
titles <- paste0(rep(1:7, each = 2), c('A', 'B'))
for (i in 1:14){
print(plotpowers(powers[scenario == i, ], titles[i]))
}
#####
# dep
powers <- readRDS('5_Powers/dep_powers.RDS') %>% as.data.table
titles <- c("Linear", "Diamond", "Triangle", "Crescent", "Points", "Exponential",
"Circles", "Cross", "Wedge", "Cubic", "W-shape", "Parabola", "Two-parabola",
"Sine", "Doppler", "Heavy-sine", "Heart", "Spiral", "Taegeuk", "Samtaegeuk")
for (i in 1:20){
print(plotpowers(powers[scenario == i, ], titles[i]))
}
#####
# image
powers <- readRDS('5_Powers/image_powers.RDS')
titles <- paste0('Image ', 1:4)
for (i in 1:4){
print(plotpowers(powers[scenario == i, ], titles[i]))
}
#####
# scribble
powers <- readRDS('5_Powers/scribble_powers.RDS')
titles <- paste0('Scribble ', 1:6)
for (i in 1:6){
print(plotpowers(powers[scenario == i, ], titles[i]))
}
#####
#INC
powers <- readRDS('5_Powers/increasingnoise_powers.RDS')
#Circles
titles <- paste0('Circles Noise Level ', 1:4)
for (i in 1:4){
print(plotpowers(powers[scenario == i, ], titles[i]))
}
#Cross
titles <- paste0('Cross: noise level ', 1:4)
for (i in 1:4){
print(plotpowers(powers[scenario == i + 4, ], titles[i]))
}
#Sine
titles <- paste0('Sine: noise level ', 1:4)
for (i in 1:4){
print(plotpowers(powers[scenario == i + 8, ], titles[i]))
}
#Spiral
titles <- paste0('Spiral: noise level ', 1:4)
for (i in 1:4){
print(plotpowers(powers[scenario == i + 12, ], titles[i]))
}
library(dplyr)
library(data.table)
library(ggplot2)
library(depstats)
sample_size <- c(30, 50, 100, 200, 300, 400)
#####
# legend
legend_data <- data.table(model = rep(c("combined", "score", "image", "others"), each = 2),
y = rep(c(3,2,1,0), each = 2), x = rep(c(0,1), 4))
ggplot(legend_data, aes(y = y, x = x, color = model)) +
geom_line(size = 1) +
theme_void() + ylim(-2, 6) + xlim(-3, 2) +
theme(legend.position="none") +
scale_color_manual(values = c("combined" = "royalblue2",
"score" = "salmon2",
"image" = "green3")) +
annotate(geom="text", x=0, y=4.5, label="Legend", size = 7.5) +
annotate(geom="text", x=-1, y=3, label="Combined Model", size = 4) +
annotate(geom="text", x=-1, y=2, label="Score Model", size = 4) +
annotate(geom="text", x=-1, y=1, label="Image Model", size = 4) +
annotate(geom="text", x=-1, y=0, label="Others", size = 4)
#####
# add
powers <- readRDS('5_Powers/add_powers.RDS') %>% as.data.table
titles <- paste0(rep(1:7, each = 2), c('A', 'B'))
for (i in 1:14){
print(plotpowers(powers[scenario == i, ], titles[i]))
}
titles[i]
powers[scenario == i, ], titles[i])
powers
#####
# add
powers <- readRDS('5_Powers/add_powers.RDS') %>% as.data.table
titles <- paste0(rep(1:7, each = 2), c('A', 'B'))
powers
powers[scenario == i, ]
plotpowers
plotpowers(powers[scenario == i, ], titles[i])
powers[scenario == i, ]
powers[scenario == i, ]
titles[i]
powers[scenario == i, ] -> power_data
titles[i] -> title
modelpowers <- power_data %>% melt(
id.vars = c("sample_size", "scenario"),
measure.vars = names(power_data)[1:22] #columns for competitor tests
) #the column for powers is value
modelpowers[, is_model := (variable %in% c("combined", "score", "image"))]
ggplot(modelpowers, aes(y = value, x = sample_size, color = variable,
alpha = is_model, size = is_model)) +
geom_line() +
theme_minimal() +
scale_color_manual(values = c("combined" = "royalblue2",
"score" = "salmon2",
"image" = "green3")) +
scale_alpha_manual(values = c(0.5, 0.9)) +
scale_size_manual(values = c(0.5, 0.75)) +
theme(legend.position="none") + xlab('sample size') + ylab('power') +
ylim(0, 1) +
scale_x_continuous(breaks = sample_size) + ggtitle(title)
plotpowers(powers[scenario == i, ], titles[i])
plotpowers(ower_data, title)
plotpowers(power_data, title)
power_data
plotpowers(power_data, title)
power_data
modelpowers <- power_data %>% melt(
id.vars = c("sample_size", "scenario"),
measure.vars = names(power_data)[1:22] #columns for competitor tests
) #the column for powers is value
modelpowers[, is_model := (variable %in% c("combined", "score", "image"))]
modelpowers
ggplot(modelpowers, aes(y = value, x = sample_size, color = variable,
alpha = is_model, size = is_model)) +
geom_line() +
theme_minimal() +
scale_color_manual(values = c("combined" = "royalblue2",
"score" = "salmon2",
"image" = "green3")) +
scale_alpha_manual(values = c(0.5, 0.9)) +
scale_size_manual(values = c(0.5, 0.75)) +
theme(legend.position="none") + xlab('sample size') + ylab('power') +
ylim(0, 1) +
scale_x_continuous(breaks = sample_size) + ggtitle(title)
print(plotpowers(powers[scenario == i, ], titles[i]))
print(plotpowers(powers[scenario == i, ], titles[i]))
plotpowers(powers[scenario == i, ], titles[i])
a = powers[scenario == i, ]
b = titles[i]
plotpowers(a, b)
power_data = powers[scenario == i, ]
title = titles[i]
plotpowers(a, b)
View(power_data)
View(power_data)
View(power_data)
plotpowers(power_data, title)
power_data = powers[scenario == i, ]
title = titles[i]
plotpowers(power_data, title)
plotpowers
modelpowers <- power_data %>% melt(
id.vars = c("sample_size", "scenario"),
measure.vars = names(power_data)[1:22] #columns for competitor tests
) #the column for powers is value
modelpowers[, is_model := (variable %in% c("combined", "score", "image"))]
ggplot(modelpowers, aes(y = value, x = sample_size, color = variable,
alpha = is_model, size = is_model)) +
geom_line() +
theme_minimal() +
scale_color_manual(values = c("combined" = "royalblue2",
"score" = "salmon2",
"image" = "green3")) +
scale_alpha_manual(values = c(0.5, 0.9)) +
scale_size_manual(values = c(0.5, 0.75)) +
theme(legend.position="none") + xlab('sample size') + ylab('power') +
ylim(0, 1) +
scale_x_continuous(breaks = sample_size) + ggtitle(title)
plotpowers(power_data, title)
modelpowers <- power_data %>% melt(
id.vars = c("sample_size", "scenario"),
measure.vars = names(power_data)[1:22] #columns for competitor tests
) #the column for powers is value
modelpowers
modelpowers[, is_model := (variable %in% c("combined", "score", "image"))]
install.packages(data.table)
install.packages('data.table')
install.packages("data.table")
library(dplyr)
library(data.table)
library(ggplot2)
library(depstats)
sample_size <- c(30, 50, 100, 200, 300, 400)
#####
# legend
legend_data <- data.table(model = rep(c("combined", "score", "image", "others"), each = 2),
y = rep(c(3,2,1,0), each = 2), x = rep(c(0,1), 4))
ggplot(legend_data, aes(y = y, x = x, color = model)) +
geom_line(size = 1) +
theme_void() + ylim(-2, 6) + xlim(-3, 2) +
theme(legend.position="none") +
scale_color_manual(values = c("combined" = "royalblue2",
"score" = "salmon2",
"image" = "green3")) +
annotate(geom="text", x=0, y=4.5, label="Legend", size = 7.5) +
annotate(geom="text", x=-1, y=3, label="Combined Model", size = 4) +
annotate(geom="text", x=-1, y=2, label="Score Model", size = 4) +
annotate(geom="text", x=-1, y=1, label="Image Model", size = 4) +
annotate(geom="text", x=-1, y=0, label="Others", size = 4)
#####
# add
powers <- readRDS('5_Powers/add_powers.RDS') %>% as.data.table
titles <- paste0(rep(1:7, each = 2), c('A', 'B'))
for (i in 1:14){
print(plotpowers(powers[scenario == i, ], titles[i]))
}
plotpowers(powers[scenario == i, ], titles[i])
power_data = powers[scenario == i, ]
title = titles[i]
plotpowers(power_data, title)
modelpowers <- power_data %>% melt(
id.vars = c("sample_size", "scenario"),
measure.vars = names(power_data)[1:22] #columns for competitor tests
) #the column for powers is value
modelpowers[, is_model := (variable %in% c("combined", "score", "image"))]
ggplot(modelpowers, aes(y = value, x = sample_size, color = variable,
alpha = is_model, size = is_model)) +
geom_line() +
theme_minimal() +
scale_color_manual(values = c("combined" = "royalblue2",
"score" = "salmon2",
"image" = "green3")) +
scale_alpha_manual(values = c(0.5, 0.9)) +
scale_size_manual(values = c(0.5, 0.75)) +
theme(legend.position="none") + xlab('sample size') + ylab('power') +
ylim(0, 1) +
scale_x_continuous(breaks = sample_size) + ggtitle(title)
plotpowers <- function(power_data, title){
modelpowers <- power_data %>% melt(
id.vars = c("sample_size", "scenario"),
measure.vars = names(power_data)[1:22] #columns for competitor tests
) #the column for powers is value
modelpowers[, is_model := (variable %in% c("combined", "score", "image"))]
ggplot(modelpowers, aes(y = value, x = sample_size, color = variable,
alpha = is_model, size = is_model)) +
geom_line() +
theme_minimal() +
scale_color_manual(values = c("combined" = "royalblue2",
"score" = "salmon2",
"image" = "green3")) +
scale_alpha_manual(values = c(0.5, 0.9)) +
scale_size_manual(values = c(0.5, 0.75)) +
theme(legend.position="none") + xlab('sample size') + ylab('power') +
ylim(0, 1) +
scale_x_continuous(breaks = sample_size) + ggtitle(title)
}
plotpowers(power_data, title)
print(plotpowers(powers[scenario == i, ], titles[i]))
# add
powers <- readRDS('5_Powers/add_powers.RDS') %>% as.data.table
titles <- paste0(rep(1:7, each = 2), c('A', 'B'))
for (i in 1:14){
print(plotpowers(powers[scenario == i, ], titles[i]))
}
#####
# dep
powers <- readRDS('5_Powers/dep_powers.RDS') %>% as.data.table
titles <- c("Linear", "Diamond", "Triangle", "Crescent", "Points", "Exponential",
"Circles", "Cross", "Wedge", "Cubic", "W-shape", "Parabola", "Two-parabola",
"Sine", "Doppler", "Heavy-sine", "Heart", "Spiral", "Taegeuk", "Samtaegeuk")
for (i in 1:20){
print(plotpowers(powers[scenario == i, ], titles[i]))
}
library(dplyr)
library(foreach)
library(data.table)
library(depstats)
defaultcol = c('combined','score','image',
'ACE','AUK','Blom','dcor','Hell','Hoeff','HSIC',
'Info','Ken','Martdiff','MIC','Rand','Spear',
'ddrV','ddrTS2','hhgPs','hhgGs','hhgPm','hhgGm',
"avgPower","bestPower","avgGap","worstGap",
"combined gap","score gap","image gap")
##################################################
powers <- readRDS('5_Powers/dep_powers.RDS') %>% as.data.table
Group <- c("Linear", "Diamond", "Triangle", "Crescent", "Points", "Expo-nential",
"Circles", "Cross", "Wedge", "Cubic", "W-shape", "Parabola", "Two-parabola",
"Sine", "Doppler", "Heavy-sine", "Heart", "Spiral", "Taegeuk", "Sam-taegeuk")
Powers <- foreach(i = 1:20, .combine = 'rbind') %do% {powers[scenario == i, 1:22]} %>% as.matrix
colnames(Powers) <- defaultcol[1:22]
latexpowers(Powers, Group)
