library(e1071)
library(keras)
library(fst)
?gensample
getindex
getindex(1)
getindex(2)
getindex(3)
0.48*25+0.12*15+0.4*9-2.5)
0.48*25+0.12*15+0.4*(-2.5)
0.4*35+0.1*25+0.5*(-5)
0.48*0.9+0.12*0.7+0.4*0.05
0.4*1+0.1*0.9
?gensample
gensample(10,100)
getindex
getindex(1)
getindex(2)
getindex(3)
alt_dist.train <- c(rep(6,3), rep(3,3), 1, 4,
rep(8,4), rep(18,5), rep(6,4), rep(9,4), rep(5,5),
26, 10, rep(11,3), rep(28,3), rep(32,4), rep(19,4),
rep(22,4), rep(31,4))
alt_dist.train
unique(alt_dist.train)
unique(alt_dist.train) %>% order
unique(alt_dist.train) %>% sort
getindex(1)
getindex(3)
1/3*log(300)
1/3*log(300) + 2/3*log(175)
exp^(5.344451) - 200
exp(5.344451) - 200
50/3 - 9.4428
##Generates Sample from Normal and Non-Normal Distributions
#rm(list = ls())
library(data.table)
library(dplyr)
library(pbapply)
library(PoweR)
library(e1071)
library(keras)
library(fst)
#====================================================================================================
#====================================================================================================
#I. Training Data Definition
##1.1
M_normal.train <- 100000 # number of simulations for normal distribution
normal_dist_param.train <- c(0, 1)  # parameter of the normal distribution for training purpose
##1.2
M_other.train <- 5000  # simulations per non-normal distribution
# list of alternative distribution to train the NN on
##### An empirical power comparison of univariate goodness-of-fit tests for normality (Ramao et al. 2010)
alt_dist.train <- c(rep(6,3), rep(3,3), 1, 4,
rep(8,4), rep(18,5), rep(6,4), rep(9,4), rep(5,5),
26, 10, rep(11,3), rep(28,3), rep(32,4), rep(19,4),
rep(22,4), rep(31,4))
alt_dist_param.train <- list(c(0.5, 0.5), c(1, 1), c(2, 2), c(0, 0.5), c(0, 1), c(0, 2), c(0, 1), c(2, 2),
c(1), c(2), c(4), c(10), c(0.14), c(0.5), c(2), c(5), c(10), c(2, 1), c(2, 5), c(4, 0.5), c(5, 1),
c(1), c(2), c(4), c(10), c(2, 2), c(3, 2), c(9, 1), c(15, 1),
c(100, 1), c(1, 2), c(0, 1), c(0.5, 1), c(1, 2), c(2, 3.4), c(0, 1, -0.5), c(0, 1, -1), c(0, 4, -0.75),
c(-1, 1), c(-2, 2), c(-3, 3), c(-2, 1), c(0.3, 1), c(0.5, 1), c(0.4, 3), c(0.3, 5),
c(0.05, 0.25), c(0.2, 0.25), c(0.1, 2), c(0.2, 4), c(0.3, 1, 0.25), c(0.4, 3, 0.25), c(0.5, 1, 4), c(0.4, 3, 4))
alt_dist_type.train <- c(rep("symm", 17), rep("asymm", 21), rep("ModN", 16))
alt_dist_full.train <- data.table(alt_train = alt_dist.train,
alt_param_train = I(alt_dist_param.train),
alt_type_train = alt_dist_type.train,
stringsAsFactors = F)
##1.3
test_stat <- c(1:2, 4:9, 13, 15:18, 20:26, 29:37)  # list of test statistics
alpha <- 0.05  # significance
test_stat.C <- paste0("stat", test_stat) # for .C() version of statcompute()
#====================================================================================================
#====================================================================================================
#II. In-Sample Test Data Definition
##2.1
M_normal.in <- 5000 # number of simulations for normal distribution
normal_dist_param.in <- c(0, 1) # parameter of the normal distribution for training purpose
##2.2
M_other.in <- 5000 # simulations per non-normal distribution
alt_dist.in <- alt_dist.train
alt_dist_param.in <- alt_dist_param.train
alt_dist_type.in <- alt_dist_full.train
alt_dist_full.in <- data.table(alt_in = alt_dist.train,
alt_param_in = I(alt_dist_param.train),
alt_type_in = alt_dist_type.train,
stringsAsFactors = F)
##2.3
test_stat.in <- c(1:2, 4:9, 13, 15:18, 20:26, 29:33, 34:37)
test_stat.in.C <- paste0("stat", test_stat.in) #for .C() version of statcompute()
#====================================================================================================
#====================================================================================================
#III. Out-of-Sample Test Data Definition
##3.1
# list of alternative distribution to test the NN on
##### An empirical power comparison of univariate goodness-of-fit tests for normality (Ramao et al. 2010)
##### Comprehensive comparison of normality tests: Empirical study using many different types of data (Lee et al. 2016)
alt_dist.out <- c(8, 8, 9, 9, 35, 7, 5, 6, 10, 3, 32, 19, 22, 31)
alt_dist_param.out <- list(c(2), c(5), c(2), c(5), c(1),
c(0, 1), c(3, 5), c(2, 1), c(0, 0.5), c(0, 1),c(-3, 2), c(0.5, 5), c(0.1, 4), c(0.5, 3, 4))
alt_dist_type.out <- c("symm", "symm",
rep(c("asymm", "asymm", "asymm", "symm"),2),
rep("ModN", 4))
alt_dist_full.out <- data.frame(alt_out = alt_dist.out,
alt_param_out = I(alt_dist_param.out),
alt_type_out = alt_dist_type.out,
stringsAsFactors = F)
M_other.in
M_normal.in
M_other.in
alt_dist_full.out
test_stat.C
setwd("~/")
setwd("D:/Honours Thesis/2022/New Run/Reproducing/Sample Generation/Testing/additional tests/30")
library(depstats)
#Additional Tests
#Dependence Structures from Recent Papers
##1
#Correlated Gaussian
t1 <- function(n,rho=0.5){
x <- rnorm(n,0,1)
y <- rho*x + (1-rho)*rnorm(n,0,1)
X <- cbind(x,y)
return(X)
}
##2
#Quantile of t distribution with df=1
t2 <- function(n,rho=0.5){
xs <- rnorm(n,0,1)
ys <- rho*xs + (1-rho)*rnorm(n,0,1)
x <- qt(pnorm(xs), df=1)
y <- qt(pnorm(ys), df=1)
nx <- length(x[x == Inf])
x[x == Inf] <- abs(rnorm(nx,50,1))
nx <- length(x[x == -Inf])
x[x == -Inf] <- -abs(rnorm(nx,50,1))
ny <- length(y[y == Inf])
y[y == Inf] <- abs(rnorm(ny,50,1))
ny <- length(y[y == -Inf])
y[y == -Inf] <- -abs(rnorm(ny,50,1))
X <- cbind(x,y)
return(X)
}
##3
#Correlated Laplace
t3 <- function(n,rho){
X <- LaplacesDemon::rmvl(n, c(0,0),
matrix(c(1,rho,
rho,1),nrow=2,byrow=TRUE))
return(X)
}
##4
#tanh
t4 <- function(n){
x <- rnorm(n,0,1)
y <- tanh(x)
X <- cbind(x,y)
return(X)
}
##5
#Ishigami Style
t5 <- function(n){
U <- runif(n)
V <- runif(n)
W <- runif(n)
x <- U
y <- sin(U) + 4*sin(V)^2 + 0.5*W^4*sin(U)
X <- cbind(x,y)
return(X)
}
##6
#Tree Ring
t6 <- function(n,sigma=0.1,rings=10){
L <- sample(1:rings,n,replace=TRUE)
theta <- runif(n,0,2*pi)
epsilonx <- rnorm(n,0,sigma)
epsilony <- rnorm(n,0,sigma)
x <- L*cos(theta) + epsilonx/4
y <- L*sin(theta) + epsilony/4
X <- cbind(x,y)
return(X)
}
##7
#Change in variance
t7 <- function(n,p){
x <- runif(n)
e <- rnorm(n)
y <- abs(x)^p * e
X <- cbind(x,y)
return(X)
}
X <- c()
n <- 50
X1 <- depgen(1000,n,'normnoise(t4(n),runif(1,0.25,0.5))',
randrotate=FALSE)
X2 <- depgen(1000,n,'normnoise(t4(n),runif(1,0.5,1))',
randrotate=FALSE)
X <- rbind(X,X1,X2)
Xm <- sampleapply(X,c(n),1)
Xm <- sampleapply(X2,c(n),1)
Xm
AdditionalPowers
setwd("D:/Honours Thesis/2022/New Run/Reproducing/Sample Generation/Testing/additional tests")
library(fst)
library(dplyr)
sample_sizes <- c(30, 50, 100, 200, 300, 400)
set.seed(0)
n = 30
scores <- sprintf('%s/add.fst', n) %>% read.fst()
scores
View(scores)
X
n
setwd("D:/Honours Thesis/2022/New Run/Reproducing/Sample Generation/Testing/dependent tests")
#Triangle
library(depstats)
library(tidyverse)
library(foreach)
library(fst)
sizes = c(30,50,100,200,300,400)
for(n in sizes){
set.seed(n)
cat('\n',n,'\n')
X1 <- depgen(600,n,'normnoise(rotate(tri.cld(n,runif(1,0,1),runif(1,0,1))),runif(1,0,0.5))',
randrotate=FALSE)
X2 <- depgen(200,n,'varnormnoise(rotate(tri.cld(n,runif(1,0,1),runif(1,0,1))),\'0.25*x+0.25\')',
randrotate=FALSE)
X3 <- depgen(200,n,'varnormnoise(rotate(tri.cld(n,runif(1,0,1),runif(1,0,1))),\'0.5-abs(0.25*x)\')',
randrotate=FALSE)
X <- rbind(X1,X2,X3)
Xind <- sampleapply(X,c(n),1)
write.fst(Xind %>% as.data.frame(), sprintf('VAL/dep3n%sSCORE.fst',n))
Ximage <- sampleapply(X,c(n),0,grid=25)
write.fst(Ximage %>% as.data.frame(), sprintf('VAL/dep3n%sIMAGE.fst',n))
}
setwd("D:/Honours Thesis/2022/New Run/Reproducing/Sample Generation/Testing")
library(depstats)
library(progress)
library(fst)
library(dplyr)
#Additional Tests
#Dependence Structures from Recent Papers
##1
#Correlated Gaussian
t1 <- function(n,rho=0.5){
x <- rnorm(n,0,1)
y <- rho*x + (1-rho)*rnorm(n,0,1)
X <- cbind(x,y)
return(X)
}
##2
#Quantile of t distribution with df=1
t2 <- function(n,rho=0.5){
xs <- rnorm(n,0,1)
ys <- rho*xs + (1-rho)*rnorm(n,0,1)
x <- qt(pnorm(xs), df=1)
y <- qt(pnorm(ys), df=1)
nx <- length(x[x == Inf])
x[x == Inf] <- abs(rnorm(nx,50,1))
nx <- length(x[x == -Inf])
x[x == -Inf] <- -abs(rnorm(nx,50,1))
ny <- length(y[y == Inf])
y[y == Inf] <- abs(rnorm(ny,50,1))
ny <- length(y[y == -Inf])
y[y == -Inf] <- -abs(rnorm(ny,50,1))
X <- cbind(x,y)
return(X)
}
##3
#Correlated Laplace
t3 <- function(n,rho){
X <- LaplacesDemon::rmvl(n, c(0,0),
matrix(c(1,rho,
rho,1),nrow=2,byrow=TRUE))
return(X)
}
##4
#tanh
t4 <- function(n){
x <- rnorm(n,0,1)
y <- tanh(x)
X <- cbind(x,y)
return(X)
}
##5
#Ishigami Style
t5 <- function(n){
U <- runif(n)
V <- runif(n)
W <- runif(n)
x <- U
y <- sin(U) + 4*sin(V)^2 + 0.5*W^4*sin(U)
X <- cbind(x,y)
return(X)
}
##6
#Tree Ring
t6 <- function(n,sigma=0.1,rings=10){
L <- sample(1:rings,n,replace=TRUE)
theta <- runif(n,0,2*pi)
epsilonx <- rnorm(n,0,sigma)
epsilony <- rnorm(n,0,sigma)
x <- L*cos(theta) + epsilonx/4
y <- L*sin(theta) + epsilony/4
X <- cbind(x,y)
return(X)
}
##7
#Change in variance
t7 <- function(n,p){
x <- runif(n)
e <- rnorm(n)
y <- abs(x)^p * e
X <- cbind(x,y)
return(X)
}
sample_sizes <- c(30, 50, 100, 200, 300, 400)
#only generate samples for the remaining ones
sample_sizes_remain <- as.character(sample_sizes) %>% setdiff(list.dirs('./additional tests/'))
for (sample_size in sample_sizes_remain) {
cat('working on sample size', sample_size, '...\n')
n <- as.integer(sample_size)
set.seed(10*n)
#generate additional test samples
X <- c()
set.seed(n/1000)
X1 <- depgen(1000,n,'t1(n,runif(1,0.1,0.2))',
randrotate=FALSE)
X2 <- depgen(1000,n,'t1(n,runif(1,0.2,0.3))',
randrotate=FALSE)
X <- rbind(X,X1,X2)
X1 <- depgen(1000,n,'t2(n,runif(1,0.1,0.2))',
randrotate=FALSE)
X2 <- depgen(1000,n,'t2(n,runif(1,0.2,0.3))',
randrotate=FALSE)
X <- rbind(X,X1,X2)
X1 <- depgen(1000,n,'t3(n,runif(1,0.05,0.1))',
randrotate=FALSE)
X2 <- depgen(1000,n,'t3(n,runif(1,0.1,0.2))',
randrotate=FALSE)
X <- rbind(X,X1,X2)
X1 <- depgen(1000,n,'normnoise(t4(n),runif(1,2,3))',
randrotate=FALSE)
X2 <- depgen(1000,n,'normnoise(t4(n),runif(1,3,4))',
randrotate=FALSE)
X <- rbind(X,X1,X2)
X1 <- depgen(1000,n,'normnoise(t5(n),runif(1,0.25,0.5))',
randrotate=FALSE)
X2 <- depgen(1000,n,'normnoise(t5(n),runif(1,0.5,0.75))',
randrotate=FALSE)
X <- rbind(X,X1,X2)
X1 <- depgen(1000,n,'t6(n,runif(1,0,0.5),sample(2:10,1))',
randrotate=FALSE)
X2 <- depgen(1000,n,'t6(n,runif(1,0,1),sample(2:10,1))',
randrotate=FALSE)
X <- rbind(X,X1,X2)
X1 <- depgen(1000,n,'t7(n,runif(1,0.2,0.3))',
randrotate=FALSE)
X2 <- depgen(1000,n,'t7(n,runif(1,0.1,0.2))',
randrotate=FALSE)
X <- rbind(X,X1,X2)
cat('working on dependence measures ...\n')
Xind <- sampleapply(X,c(n),1) %>% as.data.frame()
cat('working on images ...\n')
Ximage <- sampleapply(X, c(n), 0, grid=25) %>% as.data.frame()
cat('writing files ...\n')
dir.create(paste0('./additional tests/', sample_size)) #create folder
write.fst(Xind, paste0('./additional tests/', sample_size, '/', 'add.fst'))
write.fst(Ximage, paste0('./additional tests/', sample_size, '/', 'add_image.fst'))
}
setwd("D:/Honours Thesis/2022/New Run/Reproducing/Sample Generation/Testing/dependent tests")
#Points
library(depstats)
library(tidyverse)
library(foreach)
library(fst)
sizes = c(30,50,100,200,300,400)
for(n in sizes){
set.seed(n)
cat('\n',n,'\n')
pts1 <- matrix(c(1,0,
-1,0,
0,1),ncol=2,byrow=TRUE)
pts2 <- matrix(c(1,0,
-1,0,
0,0,
0,1,
0,-1),ncol=2,byrow=TRUE)
pts3 <- matrix(c(1,1,
-1,1,
0,0,
1,-1,
-1,-1),ncol=2,byrow=TRUE)
pts <- list(pts1,pts2,pts3)
X <- depgen(1000,n,'normnoise(pt.cld(n, pts[sample(c(1,2,3),1)][[1]] ), runif(1,0.05,0.5),TRUE)',
randrotate=TRUE)
Xind <- sampleapply(X,c(n),1)
write.fst(Xind %>% as.data.frame(), sprintf('VAL/dep5n%sSCORE.fst',n))
Ximage <- sampleapply(X,c(n),0,grid=25)
write.fst(Ximage %>% as.data.frame(), sprintf('VAL/dep5n%sIMAGE.fst',n))
}
setwd("D:/Honours Thesis/2022/New Run/Reproducing/Sample Generation/Testing/dependent tests")
#Circ
library(depstats)
library(tidyverse)
library(foreach)
library(fst)
sizes = c(30,50,100,200,300,400)
for(n in sizes){
set.seed(n)
cat('\n',n,'\n')
c1 <- matrix(c(0,0),ncol=2,byrow=TRUE)
c2 <- matrix(c(1,0,
-1,0,
0,1),ncol=2,byrow=TRUE)
c3 <- matrix(c(1,1,
-1,1,
1,-1,
-1,-1),ncol=2,byrow=TRUE)
cs <- list(c1,c2,c3)
X1 <- depgen(600,n,'normnoise(circ.cv(n, cs[sample(c(1,2,3),1)][[1]] ),runif(1,0,1))',
randrotate=TRUE)
X2 <- depgen(200,n,'varnormnoise(circ.cv(n, cs[sample(c(1,2,3),1)][[1]] ),\'0.5*x\')',
randrotate=TRUE)
X3 <- depgen(200,n,'varnormnoise(circ.cv(n, cs[sample(c(1,2,3),1)][[1]] ),\'0.5-abs(0.5*x)\')',
randrotate=TRUE)
X <- rbind(X1,X2,X3)
Xind <- sampleapply(X,c(n),1)
write.fst(Xind %>% as.data.frame(), sprintf('VAL/dep7n%sSCORE.fst',n))
Ximage <- sampleapply(X,c(n),0,grid=25)
write.fst(Ximage %>% as.data.frame(), sprintf('VAL/dep7n%sIMAGE.fst',n))
}
#Parabola
library(depstats)
library(tidyverse)
library(foreach)
library(fst)
sizes = c(30,50,100,200,300,400)
for(n in sizes){
set.seed(n)
cat('\n',n,'\n')
X1 <- depgen(600,n,'normnoise(rotate(parabola.cv(n)),runif(1,0,1))',
randrotate=FALSE)
X2 <- depgen(200,n,'varnormnoise(rotate(parabola.cv(n)),\'0.25*x+0.25\')',
randrotate=FALSE)
X3 <- depgen(200,n,'varnormnoise(rotate(parabola.cv(n)),\'0.5-abs(0.25*x)\')',
randrotate=FALSE)
X <- rbind(X1,X2,X3)
Xind <- sampleapply(X,c(n),1)
write.fst(Xind %>% as.data.frame(), sprintf('VAL/dep12n%sSCORE.fst',n))
Ximage <- sampleapply(X,c(n),0,grid=25)
write.fst(Ximage %>% as.data.frame(), sprintf('VAL/dep12n%sIMAGE.fst',n))
}
#Heavysine
library(depstats)
library(tidyverse)
library(foreach)
library(fst)
sizes = c(30,50,100,200,300,400)
for(n in sizes){
set.seed(n)
cat('\n',n,'\n')
X1 <- depgen(600,n,'normnoise(rotate(heavysine.cv(n)),runif(1,0,1))',
randrotate=FALSE)
X2 <- depgen(200,n,'varnormnoise(rotate(heavysine.cv(n)),\'0.25*x+0.25\')',
randrotate=FALSE)
X3 <- depgen(200,n,'varnormnoise(rotate(heavysine.cv(n)),\'0.5-abs(0.25*x)\')',
randrotate=FALSE)
X <- rbind(X1,X2,X3)
Xind <- sampleapply(X,c(n),1)
write.fst(Xind %>% as.data.frame(), sprintf('VAL/dep16n%sSCORE.fst',n))
Ximage <- sampleapply(X,c(n),0,grid=25)
write.fst(Ximage %>% as.data.frame(), sprintf('VAL/dep16n%sIMAGE.fst',n))
}
#Taegeuk
library(depstats)
library(tidyverse)
library(foreach)
library(fst)
sizes = c(30,50,100,200,300,400)
for(n in sizes){
set.seed(n)
cat('\n',n,'\n')
X1 <- depgen(600,n,'normnoise(rotate(taegeuk.cv(n)),runif(1,0,1))',
randrotate=FALSE)
X2 <- depgen(200,n,'varnormnoise(rotate(taegeuk.cv(n)),\'0.25*x+0.25\')',
randrotate=TRUE)
X3 <- depgen(200,n,'varnormnoise(rotate(taegeuk.cv(n)),\'0.5-abs(0.25*x)\')',
randrotate=TRUE)
X <- rbind(X1,X2,X3)
Xind <- sampleapply(X,c(n),1)
write.fst(Xind %>% as.data.frame(), sprintf('VAL/dep19n%sSCORE.fst',n))
Ximage <- sampleapply(X,c(n),0,grid=25)
write.fst(Ximage %>% as.data.frame(), sprintf('VAL/dep19n%sIMAGE.fst',n))
}
sampleapply
Ximage
dim(Ximage)
image(Ximage[0])
X <- cross.cv(100)
H <- MASS::kde2d(X[,1], X[,2], n = 25)
H
image(H)
H
H[['z']]
image(H[['z']])
image(H[['z']])
image(H[['z']])
t(H[['z']])
c(t(H[['z']]))
H[['z']]
c(t(H[['z']]))
